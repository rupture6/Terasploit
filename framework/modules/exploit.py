# -*- coding: utf-8 -*-

# Python library
import random
import string
from typing import Any
from urllib.parse import urlparse

# Library
from lib.container.module import Module

# Framework
from framework.console.options import OptGet


class Target:
    """ Parts of the target URL """

    scheme: str | None = None
    hostname: str | None = None
    path: str | None = None
    params: str | None = None
    query: str | None = None
    fragment: str | None = None
    username: str | None = None
    password: str | None = None
    port: int | None = None


class Exploit:
    """ Utility functions for exploit modules """

    good_status_code: list[int] = [
        200,  # OK -> exploit request succeeded
        201,  # Created -> new resource made
        202,  # Accepted -> request accepted for processing
        204,  # No Content -> success but no body
    ]

    @staticmethod
    def generate_payload() -> Any:
        """ Execute the generate function of payload module """
        return Module.payload.generate()

    @staticmethod
    def opt(key: str) -> Any:
        """ Access the option dictionary to get a specific value """
        return OptGet(key)

    @staticmethod
    def parse_url() -> None:
        """ Parse the target URL and set attributes on Target """

        target_url: str = Exploit.opt("URL")
        parsed = urlparse(target_url)

        fields: dict[str, Any] = {
            "scheme": parsed.scheme,
            "hostname": parsed.hostname,
            "path": parsed.path,
            "params": parsed.params,
            "query": parsed.query,
            "fragment": parsed.fragment,
            "username": parsed.username,
            "password": parsed.password,
            "port": parsed.port,
        }

        # Handle hostname with optional port
        hostname = parsed.hostname
        if hostname:
            if parsed.port and (
                "RPORT" not in Module.module.info["DefaultOptions"]
            ):
                hostname = f"{hostname}:{parsed.port}"
            if not parsed.port and (
                "RPORT" in Module.module.info["DefaultOptions"]
            ):
                hostname = f"{hostname}:{OptGet('RPORT')}"
        else:
            hostname = target_url

        Target.hostname = hostname

        # Handle path override
        Target.path = OptGet("PATH") or fields["path"]

        # Set remaining attributes
        for key, value in fields.items():
            if key not in ("hostname", "path"):
                setattr(Target, key, value)

    @staticmethod
    def generate_random_string(length: int = 10) -> str:
        """ Generate a random string (e.g., for shell names) """
        pool = string.ascii_letters + string.digits
        return "".join(random.choice(pool) for _ in range(length))
