# -*- coding: utf-8 -*-

# Python library
import ssl
import urllib3
import random
import string

from typing import Any
from urllib.parse import urlparse
from requests.auth import HTTPDigestAuth

# Library
from lib.container.module import Module

# Framework
from framework.console.options import OptGet


class Target:
    """ Parts of the target url """

    scheme = None
    hostname = None
    path = None
    params = None
    query = None
    fragment = None
    username = None
    password = None
    port = None


class Exploit:
    """ Utility functions of exploit modules """

    good_status_code: list[int] = [
        200,  # OK -> exploit request succeeded
        201,  # Created -> new resource made
        202,  # Accepted -> request accepted for processing
        204   # No Content -> success but no body
    ]

    def generate_payload(self) -> Any:
        """ Execute the generate function of payload module """
        return Module.payload.generate()

    def opt(self, key: str):
        """ Access the option dictionary to get a specific value """
        return OptGet(key)

    def http_digest_auth(self) -> Any:
        """ HTTP Digest Authentication """
        return HTTPDigestAuth(self.opt("USERNAME"), self.opt("PASSWORD"))

    def parse_url(self, target_url: str) -> None:
        """ Parse the target url """

        url: Any = urlparse(target_url)

        value = [
            url.scheme,
            url.hostname,
            url.path,
            url.params,
            url.query,
            url.fragment,
            url.username,
            url.password,
            url.port
        ]
        key = [
            'scheme',
            'hostname',
            'path',
            'params',
            'query',
            'fragment',
            'username',
            'password',
            'port'
        ]

        for key, value in zip(key, value):
            if key == 'hostname':
                if url.hostname:
                    if url.port:
                        setattr(Target, key, f'{value}:{url.port}')
                        continue
                    setattr(Target, key, value)
                if not url.hostname:
                    setattr(Target, 'hostname', target_url)
            else:
                setattr(Target, key, value)

    def generate_random_string(self, length: int = 10) -> str:
        """ Generate random strings, good for generating shell names """

        chars: list[Any] = []

        # Generate random characters
        for _ in range(length):
            chars.append(random.choice(string.ascii_letters + string.digits))

        # Return the crafted random chars string
        return "".join(chars)

    def certificate_requirements_toggle(self, toggle: bool) -> None:
        """ Toggle the http pool manager's cert reqs

        Toggle:
            True: verify the server's certificate against a CA
            False: don't verify the server's certificate
        """

        # Toggle to True for strict TLS
        if toggle:
            urllib3.PoolManager(cert_reqs=ssl.CERT_REQUIRED)
            return

        # Toggle False so all connections will skip SSL verification
        urllib3.PoolManager(cert_reqs=ssl.CERT_NONE)
